import 'dart:async';
import 'package:flutter/material.dart';
import 'package:teacher_app/src/features/syllabus/data/syllabus.dart';

class AIGeneratedController {
  final TextEditingController topicController = TextEditingController();

  bool isLoading = false;
  String currentPhrase = "";
  int phraseIndex = 0;
  Map<String, dynamic>? syllabusData;

  final List<String> loadingPhrases = [
    "üîç –ò—â–µ–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏...",
    "üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç...",
    "üìö –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞...",
    "üìä –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –∏ —Ç–µ–º—ã...",
    "‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é..."
  ];

  final Map<String, dynamic> mockSyllabus = {
    "title": "–û—Å–Ω–æ–≤—ã Flutter",
    "code": "FL101",
    "program": "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏",
    "credits": 3,
    "lecturer": "–ê—Å–∞–Ω–æ–≤–∞ –î–∏–Ω–∞",
    "contact": "dina.asanova@aiu.edu.kz",
    "zoom": "https://zoom.us/flutter101",
    "assistant": "–ù—É—Ä–∏—Å–ª–∞–º –ò–ª—å—è—Å–æ–≤",
    "assistantContact": "+77001234567",
    "goal": "–ù–∞—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flutter.",
    "description": "–ö—É—Ä—Å –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Flutter, –≤–∫–ª—é—á–∞—è UI, state management –∏ —Ä–∞–±–æ—Ç—É —Å API.",
    "prerequisite": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
    "postrequisite": "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ II",
    "resources": "Flutter Docs, DartPad",
    "software": "Android Studio, VS Code",
    "policy": "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∏ —Å–¥–∞—á–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.",
    "assessment": "30% –∑–∞–¥–∞–Ω–∏—è, 30% –ø—Ä–æ–µ–∫—Ç—ã, 40% —ç–∫–∑–∞–º–µ–Ω",
    "topicsPlan": "–ù–µ–¥–µ–ª—è 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ Flutter\n–ù–µ–¥–µ–ª—è 2: –í–∏–¥–∂–µ—Ç—ã\n–ù–µ–¥–µ–ª—è 3: –°–æ—Å—Ç–æ—è–Ω–∏—è\n...",
    "semester": "–û—Å–µ–Ω–Ω–∏–π 2025",
    "controlType": "–≠–∫–∑–∞–º–µ–Ω",
    "outcomes": ["–£–º–µ—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å UI", "–†–∞–±–æ—Ç–∞—Ç—å —Å REST API", "–ü—Ä–∏–º–µ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"],
    "literature": ["Flutter Apprentice", "Flutter in Action"],
    "examQuestions": ["–ß—Ç–æ —Ç–∞–∫–æ–µ StatelessWidget?", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç setState()?"]
  };

  Future<void> generateSyllabus(VoidCallback onUpdate) async {
    isLoading = true;
    syllabusData = null;
    currentPhrase = loadingPhrases[0];
    phraseIndex = 0;
    onUpdate();

    _startPhraseAnimation(onUpdate);

    await Future.delayed(const Duration(seconds: 6));

    syllabusData = mockSyllabus;
    isLoading = false;
    onUpdate();
  }

  void _startPhraseAnimation(VoidCallback onUpdate) {
    Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!isLoading || phraseIndex >= loadingPhrases.length) {
        timer.cancel();
        return;
      }
      currentPhrase = loadingPhrases[phraseIndex++];
      onUpdate();
    });
  }

  void dispose() {
    topicController.dispose();
  }
}